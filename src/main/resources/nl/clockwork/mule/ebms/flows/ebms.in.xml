<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011 Clockwork
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:http="http://www.mulesource.org/schema/mule/http/2.2" 
	xmlns:cxf="http://www.mulesource.org/schema/mule/cxf/2.2"
	xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xmlns:jdbc="http://www.mulesource.org/schema/mule/jdbc/2.2"
	xmlns:script="http://www.mulesource.org/schema/mule/scripting/2.2"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
		http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
		http://www.mulesource.org/schema/mule/cxf/2.2 http://www.mulesource.org/schema/mule/cxf/2.2/mule-cxf.xsd
		http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
		http://www.mulesource.org/schema/mule/jdbc/2.2 http://www.mulesource.org/schema/mule/jdbc/2.2/mule-jdbc.xsd
		http://www.mulesource.org/schema/mule/scripting/2.2 http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd  
	"
>

	<model>

		<service name="ebms.soap.receive">
			<inbound>
				<cxf:inbound-endpoint connector-ref="connector.cxf.ebms.in" protocolConnector="connector.http.ebms.in" address="${service.protocol}://${service.host}:${service.port}${service.url}" serviceName="EbMSPortType" namespace="http://www.ez.nl/ebms/v1" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
					<response-transformers>
						<message-properties-transformer>
							<add-message-property key="EBMS.HTTP_STATUS_CODE" value-ref="HTTP_SC_NO_CONTENT"/>
						</message-properties-transformer>
					</response-transformers>
					<cxf:inInterceptors>
						<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSContentTypeFixingInInterceptor" />
						<spring:bean class="nl.clockwork.mule.ebms.cxf.MessageInInterceptor" />
						<spring:bean class="nl.clockwork.mule.ebms.cxf.AttachmentInInterceptor" />
						<spring:bean class="nl.clockwork.mule.ebms.cxf.EbMSSecSignatureInInterceptor">
							<spring:property name="keyStorePath" value="${truststore.path}" />
							<spring:property name="keyStorePassword" value="${truststore.password}" />
						</spring:bean>  
					</cxf:inInterceptors>
					<cxf:outInterceptors>
						<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
					</cxf:outInterceptors>
				</cxf:inbound-endpoint>
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.service.EbMSPortTypeImpl" />
				<binding interface="nl.clockwork.mule.ebms.service.EbMSMessageProcessor" method="process">
					<vm:outbound-endpoint path="ebms.message.route.in" synchronous="false">
						<script:transformer>
							<script:script engine="groovy">
								import nl.clockwork.mule.ebms.model.EbMSMessage;

								Object[] objects = message.getPayload();
								EbMSMessage m = new EbMSMessage(objects[0],objects[1],objects[2],objects[3],objects[4],objects[5],objects[6],objects[7],objects[8],objects[9],objects[10],objects[11]);
								message.setPayload(m);
								return message;
							</script:script>
						</script:transformer>
					</vm:outbound-endpoint>
				</binding>
			</component>
		</service>
		
		<service name="ebms.message.route">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.route.in" />
			</inbound>
			<outbound matchAll="true">
				<filtering-router>
<!--        <mule-xml:jxpath-filter pattern="/e:purchaseOrder/e:shipTo/@country"-->
<!--                            expectedValue="US">-->
<!--            <mule-xml:namespace prefix="e" uri="http://www.example.com"/>-->
<!--        </mule-xml:jxpath-filter>-->
					<vm:outbound-endpoint path="ebms.message.store.in"/>
					<and-filter>
						<custom-filter class="nl.clockwork.mule.common.filter.ObjectExistsFilter">
							<spring:property name="xPathQuery" value="messageHeader" />
						</custom-filter>
						<custom-filter class="nl.clockwork.mule.common.filter.ObjectExistsFilter">
							<spring:property name="xPathQuery" value="manifest" />
						</custom-filter>
					</and-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.acknowledgment.store.in"/>
					<and-filter>
						<custom-filter class="nl.clockwork.mule.common.filter.ObjectExistsFilter">
							<spring:property name="xPathQuery" value="messageHeader" />
						</custom-filter>
						<custom-filter class="nl.clockwork.mule.common.filter.ObjectExistsFilter">
							<spring:property name="xPathQuery" value="acknowledgment" />
						</custom-filter>
					</and-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.store.in"/>
					<and-filter>
						<custom-filter class="nl.clockwork.mule.common.filter.ObjectExistsFilter">
							<spring:property name="xPathQuery" value="messageHeader" />
						</custom-filter>
						<custom-filter class="nl.clockwork.mule.common.filter.ObjectExistsFilter">
							<spring:property name="xPathQuery" value="errorList" />
						</custom-filter>
					</and-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.message.route.unknown" />
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
		
		<service name="ebms.message.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.store.in" />
				<selective-consumer-router>
					<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSDuplicateMessageFilter">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
					</custom-filter>
				</selective-consumer-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.acknowledgment.resend.in" />
				</forwarding-catch-all-strategy>
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.InsertEbMSMessageIn">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<!--jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="insertEbMSMessage">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToInsertEbMSMessageMap">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-transformer>
					</jdbc:outbound-endpoint-->
					<vm:outbound-endpoint path="ebms.validate.in" />
				</custom-outbound-router>
			</outbound>
			<default-service-exception-strategy>
				<vm:outbound-endpoint path="ebms.messageError.send.in" />
			</default-service-exception-strategy>
		</service>
		
		<service name="ebms.acknowledgment.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.store.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSAcknowledgmentToEbMSMessageIdEnricher">
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSAcknowledgment">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSAcknowledgmentToUpdateEbMSAcknowledgmentMap" />
					</jdbc:outbound-endpoint>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
							<spring:property name="ebMSMessageStatus" value="ACKNOWLEDGED" />
						</custom-transformer>
					</jdbc:outbound-endpoint>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSNextRetryTime">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageMap" />
					</jdbc:outbound-endpoint>
				</custom-outbound-router>
			</outbound>
		</service>

		<service name="ebms.messageError.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.store.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSMessageErrorToEbMSMessageIdEnricher">
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageError">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageErrorToUpdateEbMSAcknowledgmentMap" />
					</jdbc:outbound-endpoint>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
							<spring:property name="ebMSMessageStatus" value="MESSAGE_ERROR_RAISED" />
						</custom-transformer>
					</jdbc:outbound-endpoint>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSNextRetryTime">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageMap" />
					</jdbc:outbound-endpoint>
				</custom-outbound-router>
			</outbound>
		</service>

		<service name="ebms.validate">
			<inbound>
				<vm:inbound-endpoint path="ebms.validate.in" />
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.cpa.invalid" />
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.CPAValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.send.in" />
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSSignatureValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.send.in" />
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageHeaderValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.send.in" />
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageBodyValidationFilter" />
					</not-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.acknowledgment.send.in" />
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
		
		<service name="ebms.delegate">
			<inbound>
				<vm:inbound-endpoint path="ebms.delegate.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSMessageIdToEbMSDelegateEndpointEnricher">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
						<spring:property name="channels" ref="ebMSChannels" />
					</custom-transformer>
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToEbMSMessageContent">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
						<spring:property name="properties" value="${ebms.message.header.properties}"/>
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<expression-recipient-list-router evaluator="header" expression="delegate.path" />
			</outbound>
		</service>

	</model>

</mule>
