<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011 Clockwork
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<mule
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://www.mulesource.org/schema/mule/core/2.2" 
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xmlns:jdbc="http://www.mulesource.org/schema/mule/jdbc/2.2"
	xmlns:smtp="http://www.mulesource.org/schema/mule/smtp/2.2"
	xmlns:file="http://www.mulesource.org/schema/mule/file/2.2" 
	xmlns:ftp="http://www.mulesource.org/schema/mule/ftp/2.2" 
	xmlns:mxml="http://www.mulesource.org/schema/mule/xml/2.2"
	xmlns:script="http://www.mulesource.org/schema/mule/scripting/2.2"
	xsi:schemaLocation="
		http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
		http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
		http://www.mulesource.org/schema/mule/jdbc/2.2 http://www.mulesource.org/schema/mule/jdbc/2.2/mule-jdbc.xsd
		http://www.mulesource.org/schema/mule/smtp/2.2 http://www.mulesource.org/schema/mule/smtp/2.2/mule-smtp.xsd
		http://www.mulesource.org/schema/mule/file/2.2 http://www.mulesource.org/schema/mule/file/2.2/mule-file.xsd
		http://www.mulesource.org/schema/mule/ftp/2.2 http://www.mulesource.org/schema/mule/ftp/2.2/mule-ftp.xsd
		http://www.mulesource.org/schema/mule/xml/2.2 http://www.mulesource.org/schema/mule/xml/2.2/mule-xml.xsd
		http://www.mulesource.org/schema/mule/scripting/2.2 http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd  
	"
>

	<spring:beans>
		<util:constant id="CPA_ID" static-field="nl.clockwork.ebms.Constants.CPA_ID"/>
	</spring:beans>
	
	<script:transformer name="toCPAMap">
		<script:script engine="groovy">
			import java.util.HashMap;
			import nl.clockwork.ebms.Constants;

			HashMap map = new HashMap();
			map.put("cpa_id",message.getStringProperty(Constants.CPA_ID,null));
			map.put("cpa",message.getPayload());
			message.setPayload(map);
			return message;
		</script:script>
	</script:transformer>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="file.cpa.report.in" synchronous="false">
				<script:transformer>
          	<script:script engine="groovy">
						import java.io.PrintWriter;
						import java.io.StringWriter;
						import java.io.Writer;

						Writer result = new StringWriter();
						if (message.getExceptionPayload() != null)
						{
							PrintWriter pw = new PrintWriter(result);
							message.getExceptionPayload().getException().printStackTrace(pw);
						}

						message.setProperty("EBMS.REPORT","Update " + message.getProperty("originalFilename") + " failed.\n\n" + result.toString());
						result.close();

						return message;
					</script:script>
				</script:transformer>
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		<service name="file.cpa.service">
			<inbound>
				<file:inbound-endpoint connector-ref="connector.file.ebms"	path="${dir.upload.cpa}" moveToDirectory="${dir.upload.cpa}/processed" pollingFrequency="${dir.upload.cpa.pollingFrequency}" synchronous="false">
					<file:filename-wildcard-filter pattern="*.xml" caseSensitive="false"/>
					<!--file:file-to-string-transformer/-->
					<object-to-string-transformer/>
				</file:inbound-endpoint>				
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="file.cpa.metadata.in" synchronous="false"/>
					<custom-filter class="nl.clockwork.mule.common.filter.XSDValidationFilter">
						<spring:property name="xsdFile" value="/nl/clockwork/mule/ebms/xsd/cpp-cpa-2_0.xsd" />
					</custom-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="file.cpa.report.in" synchronous="false">
						<!--message-properties-transformer>
							<add-message-property key="EBMS.REPORT" value="#[header:originalFilename] contains no CPA." />
						</message-properties-transformer-->
						<script:transformer>
            	<script:script engine="groovy">
								message.setProperty("EBMS.REPORT",message.getProperty("originalFilename") + " contains no CPA.");
								return message;
							</script:script>
						</script:transformer>
					</vm:outbound-endpoint>
				</forwarding-catch-all-strategy>
			</outbound>
		</service>

		<service name="file.cpa.metadata">
			<inbound>
				<vm:inbound-endpoint path="file.cpa.metadata.in" synchronous="false">
					<!--message-properties-transformer>
						<add-message-property key="EBMS.CPA_ID" value="#[xpath:/CollaborationProtocolAgreement/@cpaid]" />
					</message-properties-transformer-->
					<custom-transformer class="nl.clockwork.mule.common.enricher.XPathPropertyEnricher">
						<spring:property name="xpathQueries">
							<spring:map>
								<spring:entry key-ref="CPA_ID" value="/CollaborationProtocolAgreement/@cpaid" />
							</spring:map>
						</spring:property>
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="file.cpa.update.in" synchronous="false"/>
					<custom-filter class="nl.clockwork.mule.ebms.filter.CPAIdExistsFilter">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
					</custom-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="file.cpa.insert.in" synchronous="false" />
				</forwarding-catch-all-strategy>
			</outbound>
		</service>

		<service name="file.cpa.insert">
			<inbound>
				<vm:inbound-endpoint path="file.cpa.insert.in" synchronous="false" />
			</inbound>
			<outbound>
				<chaining-router>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="query">
						<transformer ref="toCPAMap"/>
						<jdbc:query key="query" value-ref="insertCPA" />
					</jdbc:outbound-endpoint>
					<vm:outbound-endpoint path="file.cpa.report.in" synchronous="false">
						<script:transformer>
            	<script:script engine="groovy">
								message.setProperty("EBMS.REPORT",message.getProperty("originalFilename") + " inserted successfully.");
								return message;
							</script:script>
						</script:transformer>
					</vm:outbound-endpoint>
				</chaining-router>
			</outbound>
		</service>

		<service name="file.cpa.update">
			<inbound>
				<vm:inbound-endpoint path="file.cpa.update.in" synchronous="false" />
			</inbound>
			<outbound>
				<chaining-router>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="query">
						<transformer ref="toCPAMap"/>
						<jdbc:query key="query" value-ref="updateCPA" />
					</jdbc:outbound-endpoint>
					<vm:outbound-endpoint path="file.cpa.report.in" synchronous="false">
						<script:transformer>
            	<script:script engine="groovy">
								message.setProperty("EBMS.REPORT",message.getProperty("originalFilename") + " updated successfully.");
								return message;
							</script:script>
						</script:transformer>
					</vm:outbound-endpoint>
				</chaining-router>
			</outbound>
		</service>

		<service name="file.cpa.report">
			<inbound>
				<vm:inbound-endpoint path="file.cpa.report.in" synchronous="false" />
			</inbound>
			<outbound>
				<pass-through-router>
					<file:outbound-endpoint connector-ref="connector.file.ebms" path="${dir.upload.cpa}/reports" outputPattern="report_#[function:datestamp:yyyyMMddHHmmSSS].txt">
						<expression-transformer returnClass="java.lang.String">
							<return-argument evaluator="header" expression="EBMS.REPORT"/>
						</expression-transformer>
					</file:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

	</model>

</mule>
