<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011 Clockwork
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:http="http://www.mulesource.org/schema/mule/http/2.2" 
	xmlns:cxf="http://www.mulesource.org/schema/mule/cxf/2.2"
	xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xmlns:jdbc="http://www.mulesource.org/schema/mule/jdbc/2.2"
	xmlns:script="http://www.mulesource.org/schema/mule/scripting/2.2"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
		http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
		http://www.mulesource.org/schema/mule/cxf/2.2 http://www.mulesource.org/schema/mule/cxf/2.2/mule-cxf.xsd
		http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
		http://www.mulesource.org/schema/mule/jdbc/2.2 http://www.mulesource.org/schema/mule/jdbc/2.2/mule-jdbc.xsd
		http://www.mulesource.org/schema/mule/scripting/2.2 http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd  
	"
>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.message.receive.async.reply">
				<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
			</vm:outbound-endpoint>
		</default-service-exception-strategy>
		
		<service name="ebms.message.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.receive.in" />
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.eliminateDuplicate.in" />
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="${async.reply.default.timeout}">
				<vm:inbound-endpoint path="ebms.message.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>

		<service name="ebms.message.eliminateDuplicate">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.eliminateDuplicate.in" />
				<selective-consumer-router>
					<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSDuplicateMessageFilter">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
					</custom-filter>
				</selective-consumer-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.message.validate.in" />
				</forwarding-catch-all-strategy>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.duplicate.validate.in" />
				</pass-through-router>
			</outbound>
		</service>
		
		<service name="ebms.message.duplicate.validate">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.duplicate.validate.in"/>
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.response.find.in" />
					<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageHeaderCompareFilter">
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<!--vm:outbound-endpoint path="ebms.message.duplicate.invalid" /-->
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
				</forwarding-catch-all-strategy>
			</outbound>
		</service>

		<service name="ebms.response.find">
			<inbound>
				<vm:inbound-endpoint path="ebms.response.find.in">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSRefToMessageToEbMSMessageId">
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<filtering-router>
					<!--vm:outbound-endpoint path="ebms.message.validate.in" /-->
					<vm:outbound-endpoint path="ebms.message.receive.async.reply"/>
					<payload-type-filter expectedType="org.mule.transport.NullPayload"/>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.response.resend.in" />
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
			
		<service name="ebms.response.resend">
			<inbound>
				<vm:inbound-endpoint path="ebms.response.resend.in"/>
			</inbound>
			<outbound>
				<chaining-router>
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="addEbMSMessageSendEvent">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToMap" />
					</jdbc:outbound-endpoint>
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
				</chaining-router>
			</outbound>
		</service>
		
		<service name="ebms.message.validate">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.validate.in" />
			</inbound>
			<outbound>
				<filtering-router>
					<!--vm:outbound-endpoint path="ebms.cpa.notFound" /-->
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
						<custom-transformer class="nl.clockwork.mule.common.transformer.Logger">
							<spring:property name="message" value="CPA not found!"/>
							<spring:property name="logLevel" value="WARN"/>
						</custom-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.CPAExistsFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="UN_AUTHORIZED"/>
						</message-properties-transformer>
						<custom-transformer class="nl.clockwork.mule.common.transformer.Logger">
							<spring:property name="message" value="CPA invalid!"/>
						</custom-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.CPAValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="UN_AUTHORIZED"/>
						</message-properties-transformer>
						<custom-transformer class="nl.clockwork.mule.common.transformer.Logger">
							<spring:property name="message" value="MessageHeader invalid!"/>
						</custom-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageHeaderValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="UN_AUTHORIZED"/>
						</message-properties-transformer>
						<custom-transformer class="nl.clockwork.mule.common.transformer.Logger">
							<spring:property name="message" value="Signature invalid!"/>
						</custom-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSSignatureValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="NOT_RECOGNIZED"/>
						</message-properties-transformer>
						<custom-transformer class="nl.clockwork.mule.common.transformer.Logger">
							<spring:property name="message" value="MessageData invalid!"/>
						</custom-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageDataValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.messageError.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="UN_AUTHORIZED"/>
						</message-properties-transformer>
						<custom-transformer class="nl.clockwork.mule.common.transformer.Logger">
							<spring:property name="message" value="Manifest invalid!"/>
						</custom-transformer>
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSManifestValidationFilter" />
					</not-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.acknowledgment.create.in">
						<message-properties-transformer>
							<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="RECEIVED"/>
						</message-properties-transformer>
						<custom-transformer class="nl.clockwork.mule.common.transformer.Logger">
							<spring:property name="message" value="Message valid."/>
						</custom-transformer>
					</vm:outbound-endpoint>
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
		
		<service name="ebms.messageError.create">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.create.in">
					<custom-transformer class="nl.clockwork.mule.common.enricher.AddPayloadAsProperty">
						<spring:property name="propertyName" value="EBMS.EBMS_MESSAGE"/>
					</custom-transformer>
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSMessageError">
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.messageError.out.store.in"/>
				</pass-through-router>
			</outbound>
		</service>
		
		<service name="ebms.messageError.out.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.out.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSMessageInEbMSMessageErrorOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

		<service name="ebms.acknowledgment.create">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.create.in">
					<custom-transformer class="nl.clockwork.mule.common.enricher.AddPayloadAsProperty">
						<spring:property name="propertyName" value="EBMS.EBMS_MESSAGE"/>
					</custom-transformer>
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSAcknowledgment">
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.acknowledgment.out.store.in"/>
				</pass-through-router>
			</outbound>
		</service>
		
		<service name="ebms.acknowledgment.out.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.out.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSMessageInEbMSAcknowledgmentOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

	</model>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.messageError.receive.async.reply">
				<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		<!-- TODO validate message -->
		<service name="ebms.messageError.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.receive.in">
					<message-properties-transformer>
						<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="nl.clockwork.mule.ebms.Constants.EbMSMessageStatus.RECEIVED"/>
					</message-properties-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.messageError.in.store.in"/>
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="${async.reply.default.timeout}">
				<vm:inbound-endpoint path="ebms.messageError.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>
		
		<service name="ebms.messageError.in.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.in.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSMessageErrorIn">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.messageError.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

	</model>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.acknowledgment.receive.async.reply">
				<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		<!-- TODO validate message -->
		<service name="ebms.acknowledgment.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.receive.in">
					<message-properties-transformer>
						<add-message-property key="EBMS.EBMS_MESSAGE_STATUS" value="nl.clockwork.mule.ebms.Constants.EbMSMessageStatus.RECEIVED"/>
					</message-properties-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.acknowledgment.in.store.in"/>
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="${async.reply.default.timeout}">
				<vm:inbound-endpoint path="ebms.acknowledgment.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>
		
		<service name="ebms.acknowledgment.in.store">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.in.store.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.StoreEbMSAcknowledgmentIn">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.acknowledgment.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>

	</model>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.statusRequest.receive.async.reply">
				<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		<service name="ebms.statusRequest.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.statusRequest.receive.in"/>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.statusRequest.validate.in" />
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="${async.reply.default.timeout}">
				<vm:inbound-endpoint path="ebms.statusRequest.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>
		
		<service name="ebms.messageStatus.validate">
			<inbound>
				<vm:inbound-endpoint path="ebms.statusRequest.validate.in" />
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.statusRequest.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.CPAValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.statusRequest.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageActionFilter">
							<spring:property name="action" value="StatusRequest"/>
						</custom-filter>
					</not-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.statusResponse.create.in" />
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
		
		<service name="ebms.statusResponse.create">
			<inbound>
				<vm:inbound-endpoint path="ebms.statusResponse.create.in">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSStatusRequestToEbMSStatusResponse">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.statusRequest.receive.async.reply"/>
				</pass-through-router>
			</outbound>
		</service>

	</model>

	<model>

		<default-service-exception-strategy>
			<vm:outbound-endpoint path="ebms.ping.receive.async.reply">
				<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
			</vm:outbound-endpoint>
		</default-service-exception-strategy>

		<service name="ebms.ping.receive">
			<inbound>
				<vm:inbound-endpoint path="ebms.ping.receive.in"/>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.ping.validate.in" />
				</pass-through-router>
			</outbound>
			<async-reply failOnTimeout="true" timeout="${async.reply.default.timeout}">
				<vm:inbound-endpoint path="ebms.ping.receive.async.reply" />
				<single-async-reply-router/>
			</async-reply>
		</service>
		
		<service name="ebms.ping.validate">
			<inbound>
				<vm:inbound-endpoint path="ebms.ping.validate.in" />
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.ping.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.CPAValidationFilter">
							<spring:property name="ebMSDAO" ref="ebMSDAO" />
						</custom-filter>
					</not-filter>
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="ebms.ping.receive.async.reply">
						<custom-transformer class="nl.clockwork.mule.common.transformer.NullPayloadTransformer" />
					</vm:outbound-endpoint>
					<not-filter>
						<custom-filter class="nl.clockwork.mule.ebms.filter.EbMSMessageActionFilter">
							<spring:property name="action" value="Ping"/>
						</custom-filter>
					</not-filter>
				</filtering-router>
				<forwarding-catch-all-strategy>
					<vm:outbound-endpoint path="ebms.pong.create.in" />
				</forwarding-catch-all-strategy>
			</outbound>
		</service>
		
		<service name="ebms.pong.create">
			<inbound>
				<vm:inbound-endpoint path="ebms.pong.create.in">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSPingToEbMSPong">
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.ping.receive.async.reply"/>
				</pass-through-router>
			</outbound>
		</service>

	</model>

</mule>
