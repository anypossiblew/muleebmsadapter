<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2011 Clockwork
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:file="http://www.mulesource.org/schema/mule/file/2.2" 
	xmlns:http="http://www.mulesource.org/schema/mule/http/2.2" 
	xmlns:cxf="http://www.mulesource.org/schema/mule/cxf/2.2"
	xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
	xmlns:jdbc="http://www.mulesource.org/schema/mule/jdbc/2.2"
	xmlns:script="http://www.mulesource.org/schema/mule/scripting/2.2"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
		http://www.mulesource.org/schema/mule/file/2.2 http://www.mulesource.org/schema/mule/file/2.2/mule-file.xsd
		http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
		http://www.mulesource.org/schema/mule/cxf/2.2 http://www.mulesource.org/schema/mule/cxf/2.2/mule-cxf.xsd
		http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
		http://www.mulesource.org/schema/mule/jdbc/2.2 http://www.mulesource.org/schema/mule/jdbc/2.2/mule-jdbc.xsd
		http://www.mulesource.org/schema/mule/scripting/2.2 http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd  
	"
>

	<model>

		<service name="ebms.message.send.response">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.send.response.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSMessageContentToAttachmentEnricher" />
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageContentToEbMSMessage">
						<spring:property name="hostname" value="${service.host}" />
						<spring:property name="channels" ref="ebMSChannels" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<!--outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.send.in" />
				</pass-through-router>
			</outbound-->
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.InsertEbMSMessageOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.common.cxf.AttachmentOutInterceptor" />
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
<!--							<spring:bean class="nl.clockwork.mule.ebms.cxf.XMLSecSignatureOutInterceptor">-->
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleXMLSecSignatureOutInterceptor">
								<spring:property name="keyStorePath" value="${signature.keystore.path}" />
								<spring:property name="keyStorePassword" value="${signature.keystore.password}" />
								<spring:property name="keyAlias" value="${signature.key.alias}" />
								<spring:property name="keyPassword" value="${signature.key.password}" />
							</spring:bean>  
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>  
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
							<spring:property name="ebMSMessageStatus" value="DELIVERED" />
						</custom-transformer>
					</jdbc:outbound-endpoint>
				</custom-outbound-router>
			</outbound>
			<default-service-exception-strategy>
				<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
						<spring:property name="ebMSMessageStatus" value="DELIVERY_FAILED" />
					</custom-transformer>
				</jdbc:outbound-endpoint>
			</default-service-exception-strategy>
		</service>

		<service name="ebms.message.send.request">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.send.request.in">
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSMessageContentToAttachmentEnricher" />
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageContentToEbMSMessage">
						<spring:property name="hostname" value="${service.host}" />
						<spring:property name="channels" ref="ebMSChannels" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<!--outbound>
				<pass-through-router>
					<vm:outbound-endpoint path="ebms.message.send.in" />
				</pass-through-router>
			</outbound-->
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.InsertEbMSMessageOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.common.cxf.AttachmentOutInterceptor" />
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
<!--							<spring:bean class="nl.clockwork.mule.ebms.cxf.XMLSecSignatureOutInterceptor">-->
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleXMLSecSignatureOutInterceptor">
								<spring:property name="keyStorePath" value="${signature.keystore.path}" />
								<spring:property name="keyStorePassword" value="${signature.keystore.password}" />
								<spring:property name="keyAlias" value="${signature.key.alias}" />
								<spring:property name="keyPassword" value="${signature.key.password}" />
							</spring:bean>  
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>  
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
							<spring:property name="ebMSMessageStatus" value="DELIVERED" />
						</custom-transformer>
					</jdbc:outbound-endpoint>
				</custom-outbound-router>
			</outbound>
			<default-service-exception-strategy>
				<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
						<spring:property name="ebMSMessageStatus" value="DELIVERY_FAILED" />
					</custom-transformer>
				</jdbc:outbound-endpoint>
			</default-service-exception-strategy>
		</service>

		<service name="ebms.message.send">
			<inbound>
				<vm:inbound-endpoint path="ebms.message.send.in" />
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.InsertEbMSMessageOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.common.cxf.AttachmentOutInterceptor" />
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
<!--							<spring:bean class="nl.clockwork.mule.ebms.cxf.XMLSecSignatureOutInterceptor">-->
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleXMLSecSignatureOutInterceptor">
								<spring:property name="keyStorePath" value="${signature.keystore.path}" />
								<spring:property name="keyStorePassword" value="${signature.keystore.password}" />
								<spring:property name="keyAlias" value="${signature.key.alias}" />
								<spring:property name="keyPassword" value="${signature.key.password}" />
							</spring:bean>  
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>  
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
							<spring:property name="ebMSMessageStatus" value="DELIVERED" />
						</custom-transformer>
					</jdbc:outbound-endpoint>
				</custom-outbound-router>
			</outbound>
			<default-service-exception-strategy>
				<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
						<spring:property name="ebMSMessageStatus" value="DELIVERY_FAILED" />
					</custom-transformer>
				</jdbc:outbound-endpoint>
			</default-service-exception-strategy>
		</service>

		<service name="ebms.message.resend">
			<inbound>
				<jdbc:inbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="selectEbMSMessageForResend" pollingFrequency="${ebMSMessage.resend.pollingFrequency}">
					<custom-transformer class="nl.clockwork.mule.common.enricher.MapPropertyEnricher">
						<spring:property name="keys">
							<spring:map>
								<spring:entry key="id" value-ref="EBMS_MESSAGE_ID" />
							</spring:map>
						</spring:property>
					</custom-transformer>
					<custom-transformer class="nl.clockwork.mule.ebms.enricher.EbMSMessageIdToAttachmentEnricher">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
					</custom-transformer>
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToEbMSMessage">
						<spring:property name="ebMSDAO" ref="ebMSDAO" />
					</custom-transformer>
				</jdbc:inbound-endpoint>
			</inbound>
			<component>
				<singleton-object class="nl.clockwork.mule.ebms.component.UpdateEbMSMessageOut">
					<property key="ebMSDAO" value-ref="ebMSDAO"/>
				</singleton-object>
			</component>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.common.cxf.AttachmentOutInterceptor" />
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
<!--							<spring:bean class="nl.clockwork.mule.ebms.cxf.XMLSecSignatureOutInterceptor">-->
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleXMLSecSignatureOutInterceptor">
								<spring:property name="keyStorePath" value="${signature.keystore.path}" />
								<spring:property name="keyStorePassword" value="${signature.keystore.password}" />
								<spring:property name="keyAlias" value="${signature.key.alias}" />
								<spring:property name="keyPassword" value="${signature.key.password}" />
							</spring:bean>  
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>  
				</custom-outbound-router>
			</outbound>
		</service>

		<service name="ebms.messageError.send">
			<inbound>
				<vm:inbound-endpoint path="ebms.messageError.send.in">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSMessageError">
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageAcknowledgment">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageErrorToUpdateEbMSMessageAcknowledgmentMap" />
					</jdbc:outbound-endpoint>
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" synchronous="true">
						<!--custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSMessageError">
							<spring:property name="hostname" value="${service.host}" />
						</custom-transformer-->
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>  
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
							<spring:property name="ebMSMessageStatus" value="MESSAGE_ERROR_RAISED" />
						</custom-transformer>
					</jdbc:outbound-endpoint>
				</custom-outbound-router>
			</outbound>
			<default-service-exception-strategy>
				<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
						<spring:property name="ebMSMessageStatus" value="MESSAGE_ERROR_FAILED" />
					</custom-transformer>
				</jdbc:outbound-endpoint>
			</default-service-exception-strategy>
		</service>

		<service name="ebms.acknowledgment.send">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.send.in">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSAcknowledgment">
						<spring:property name="hostname" value="${service.host}" />
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<custom-outbound-router class="nl.clockwork.mule.common.router.ChainingRouter">
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageAcknowledgment">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSAcknowledgmentToUpdateEbMSMessageAcknowledgmentMap" />
					</jdbc:outbound-endpoint>
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" synchronous="true">
						<!--custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToEbMSAcknowledgment">
							<spring:property name="hostname" value="${service.host}" />
						</custom-transformer-->
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>  
					<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
						<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
							<spring:property name="ebMSMessageStatus" value="ACKNOWLEDGED" />
						</custom-transformer>
					</jdbc:outbound-endpoint>
					<vm:outbound-endpoint path="ebms.delegate.in" />
				</custom-outbound-router>
			</outbound>
			<default-service-exception-strategy>
				<jdbc:outbound-endpoint connector-ref="connector.jdbc.ebms" queryKey="updateEbMSMessageStatus">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageIdToUpdateEbMSMessageStatusMap">
						<spring:property name="ebMSMessageStatus" value="ACKNOWLEDGMENT_FAILED" />
					</custom-transformer>
				</jdbc:outbound-endpoint>
			</default-service-exception-strategy>
		</service>

		<service name="ebms.acknowledgment.resend">
			<inbound>
				<vm:inbound-endpoint path="ebms.acknowledgment.resend.in">
					<custom-transformer class="nl.clockwork.mule.ebms.transformer.EbMSMessageToAcknowledgment">
						<spring:property name="ebMSDAO" ref="ebMSDAO"/>
					</custom-transformer>
				</vm:inbound-endpoint>
			</inbound>
			<outbound>
				<filtering-router>
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.common.cxf.AttachmentOutInterceptor" />
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>
					<message-property-filter pattern="EBMS.ACKNOWLEDGMENT_TYPE=ACKNOWLEDGMENT"/>  
				</filtering-router>
				<filtering-router>
					<cxf:outbound-endpoint connector-ref="connector.cxf.ebms.out" protocolConnector="connector.http.ebms.out" address="${service.protocol}://${service.remote.host}:${service.remote.port}${service.remote.url}" clientClass="nl.clockwork.mule.ebms.service.EbMS" wsdlPort="EbMSPort" wsdlLocation="classpath:/nl/clockwork/mule/ebms/wsdl/ebms.wsdl" operation="Message" enableMuleSoapHeaders="false" mtomEnabled="true" synchronous="true">
						<cxf:inInterceptors>
							<spring:bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
						</cxf:inInterceptors>
						<cxf:outInterceptors>
							<spring:bean class="nl.clockwork.common.cxf.AttachmentOutInterceptor" />
							<spring:bean class="nl.clockwork.mule.ebms.cxf.OracleEbMSXMLPrefixFixingOutInterceptor" />
							<spring:bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>  
					<message-property-filter pattern="EBMS.ACKNOWLEDGMENT_TYPE=MESSAGE_ERROR"/>  
				</filtering-router>
			</outbound>
		</service>

	</model>

</mule>
